[{"/home/sebi/dev/crypto-dolar-blue/src/index.js":"1","/home/sebi/dev/crypto-dolar-blue/src/App.js":"2","/home/sebi/dev/crypto-dolar-blue/src/components/ER.js":"3","/home/sebi/dev/crypto-dolar-blue/src/components/FormattedPrice.js":"4","/home/sebi/dev/crypto-dolar-blue/src/components/Calc.js":"5"},{"size":220,"mtime":1610904338344,"results":"6","hashOfConfig":"7"},{"size":3110,"mtime":1611171677345,"results":"8","hashOfConfig":"7"},{"size":2252,"mtime":1611098157724,"results":"9","hashOfConfig":"7"},{"size":1548,"mtime":1610904338344,"results":"10","hashOfConfig":"7"},{"size":7446,"mtime":1611170136069,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"17p50vf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/home/sebi/dev/crypto-dolar-blue/src/index.js",[],["25","26"],"/home/sebi/dev/crypto-dolar-blue/src/App.js",["27"],"/home/sebi/dev/crypto-dolar-blue/src/components/ER.js",["28"],"import React, {Component} from 'react'\nimport axios from 'axios'\nimport FormattedPrice from './FormattedPrice'\n\nexport default class ER extends Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            bid: this.props.coin.bid,\n            ask: this.props.coin.ask,\n            id: \"\",\n            ticker: this.props.coin.ticker\n        }\n\n        this.updatePrice = this.updatePrice.bind(this)\n        this.changeColor = this.changeColor.bind(this)\n    }\n\n    changeColor() {\n        this.setState({\n            ...this.state,\n            id: this.props.coin.symbol \n        })\n        setTimeout( () => {\n            this.setState({\n                ...this.state,\n                id: '',\n            })\n        }, 1000);\n    }\n\n\n    updatePrice(){\n        axios.get('https://www.bitstamp.net/api/v2/ticker/' + this.props.coin.symbol + '/')\n        .then( res => {\n            this.changeColor()\n            this.setState({\n                bid: res.data.bid ,\n                ask: res.data.ask ,\n            })\n        })\n        .catch(err => console.log('no response'+ err))\n\n    }\n    \n    componentDidMount(){\n        this.setState({\n            bid: this.props.coin.bid,\n            ask: this.props.coin.ask,\n            id: \"\",\n            ticker: this.props.coin.ticker\n        })\n        if(this.state.ticker == true){\n            this.updatePrice()\n            let seconds = 3 \n            let the_interval = seconds* 1000\n            setInterval(this.updatePrice, the_interval)\n        }\n    }\n\n    render(){\n\n        return(\n            <div className=\"er\" id={this.state.id}>\n                <h4 id={this.props.coin.symbol}>{this.props.coin.name}</h4>\n                Compra\n                <div className=\"bid\">\n                    <div className=\"currency\">{this.props.coin.priceIn}</div>\n                    <FormattedPrice price={this.state.bid} size=\"big\" />\n                </div>\n                <hr className=\"dashed\"/>\n                Venta\n                <div className=\"ask\">\n                    <div className=\"currency\">{this.props.coin.priceIn}</div> \n                    <FormattedPrice price={this.props.coin.ask} size=\"small\"/>\n                </div>\n            </div>\n\n        )\n    }\n\n}","/home/sebi/dev/crypto-dolar-blue/src/components/FormattedPrice.js",[],"/home/sebi/dev/crypto-dolar-blue/src/components/Calc.js",["29","30"],"import React, {Component} from 'react'\n\nexport default class Calc extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            exRateType: \"blue\",\n            currencyA: \"\",\n            valueA: \"\",\n            currencyB: \"\",\n            valueB: \"\",\n        \n        }\n        // this.handleInputs = this.handleInputs.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.makeConvexRatession = this.makeConvexRatession.bind(this)\n\n    }\n\n\n\n    handleChange(e) {\n        this.makeConvexRatession(e)\n    }\n\n    makeConvexRatession(e){\n\n        let localA = this.state.valueA\n        let exRateType = this.state.exRateType\n        let currencyA = this.state.currencyA\n        let currencyB = this.state.currencyB\n\n        switch (e.target.name) {\n            case \"currencyA\":\n                currencyA = e.target.value\n                break;\n                \n                case \"currencyB\":\n                    currencyB = e.target.value\n                break;\n                \n            case \"valueA\":\n                localA = e.target.value\n                break;\n                \n            case \"exRateType\":\n                exRateType = e.target.value\n                break;\n                \n            default:\n                break\n\n            }      \n                     \n        // exchange rates are defined compared to 1 USD\n        let exRates = {}\n\n        this.props.erList.map( er => {\n            exRates = {\n                ...exRates,\n                [er.symbol]: er.avg\n            }\n        } )\n\n        exRates.usdusd = 1\n        exRates.usdbtc = 1 / exRates.btcusd\n        exRates.usdeth = 1 / exRates.ethusd\n\n        console.log(exRates)\n\n        let exRateNameA = \"usd\" + currencyA\n        if(currencyA===\"ars\"){\n            exRateNameA=exRateNameA+this.state.exRateType \n        }\n\n\n        let exRateNameB = \"usd\" + currencyB\n        if(currencyB===\"ars\"){\n            exRateNameB=exRateNameB+this.state.exRateType \n        }\n        \n        let localB = ( localA / exRates[exRateNameA]) * exRates[exRateNameB];\n\n        if(localB >= 10){\n            localB =  Math.round(localB*100) /100 \n        }\n\n        this.setState({\n            ...this.state,\n            valueB: localB,\n            [e.target.name]: e.target.value,\n\n        })\n\n    }\n\n    render(){\n        return(\n            <div className=\"calc\">\n                <div className=\"calc-head \">\n                <div className=\"row\">\n                    <div className=\"float-left col-md-4 margin-auto\">\n                        <h6>Tipo de Cambio</h6>\n                    </div>\n\n                    <div className=\"btn-group float-right col-md-8\" role=\"group\">\n\n                        {this.state.exRateType === 'blue' ?\n                            <>\n                                <button type=\"button\" name=\"exRateType\" value=\"official\" onClick={this.handleChange} className=\"btn text-muted\">Oficial</button>\n                                <button type=\"button\" name=\"exRateType\" value=\"blue\" onClick={this.handleChange} className=\"btn btn-primary\">Blue</button>\n                            </>\n                            :\n                            <>\n                                <button type=\"button\" name=\"exRateType\" value=\"official\" onClick={this.handleChange} className=\"btn btn-success\">Oficial</button>\n                                <button type=\"button\" name=\"exRateType\" value=\"blue\" onClick={this.handleChange} className=\"btn text-muted\">Blue</button>\n                            </>\n                        }\n                    </div>\n                    <br />\n                </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"calc-section\">\n                            <div className=\"input-group mb-3\">\n                                <div className=\"input-group-prepend\">\n                                </div>\n                                <select className=\"custom-select\" name=\"currencyA\" id=\"inputGroupSelect01\" onInput={this.handleChange}>\n                                    <option selected>Elegir moneda</option>\n                                    <option value=\"usd\">DÃ³lar</option>\n                                    <option value=\"ars\">Peso Argentino</option>\n                                    <option value=\"eur\">Euro</option>\n                                    <option value=\"btc\">Bitcoin</option>\n                                    <option value=\"eth\">Etherum</option>\n                                    <option value=\"brl\">Real Brasilero</option>\n                                    <option value=\"gbp\">Libra Esterlina</option>\n                                    <option value=\"mxn\">Peso Mexicano</option>\n                                    <option value=\"cny\">Yuan Chino</option>\n                                </select>\n                            </div>\n                            <div className=\"input-group mb-3\">\n                                <div className=\"input-group-prepend\">\n                                    <span className=\"input-group-text\">{this.state.currencyA}</span>\n                                </div>\n                                <input type=\"numbexRates\" className=\"form-control\" name=\"valueA\" value={this.state.valueA} onInput={this.handleChange} aria-label=\"Dollar amount (with dot and two decimal places)\" />\n                            </div>\n                        </div>\n                    </div>\n                    <br />\n\n                    <div className=\"col-md-6\">\n                        <div className=\"calc-section\">\n\n                            <div className=\"input-group mb-3\">\n                                <div className=\"input-group-prepend\">\n                                </div>\n                                <select className=\"custom-select\" name=\"currencyB\" id=\"inputGroupSelect01\" onInput={this.handleChange}>\n                                    <option selected>Elegir moneda</option>\n                                    <option value=\"usd\">DÃ³lar</option>\n                                    <option value=\"ars\">Peso Argentino</option>\n                                    <option value=\"eur\">Euro</option>\n                                    <option value=\"btc\">Bitcoin</option>\n                                    <option value=\"eth\">Etherum</option>\n                                    <option value=\"brl\">Real Brasilero</option>\n                                    <option value=\"gbp\">Libra Esterlina</option>\n                                    <option value=\"mxn\">Peso Mexicano</option>\n                                    <option value=\"cny\">Yuan CHino</option>\n                                </select>\n                            </div>\n                            <div className=\"input-group mb-3\">\n                                <div className=\"input-group-prepend\">\n                                    <span className=\"input-group-text\">{this.state.currencyB}</span>\n                                </div>\n                                <input type=\"numbexRates\" className=\"form-control\" value={this.state.valueB} aria-label=\"Dollar amount (with dot and two decimal places)\" readOnly />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }   \n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":36,"column":25,"nodeType":"37","messageId":"38","endLine":36,"endColumn":27},{"ruleId":"39","severity":1,"message":"40","line":53,"column":30,"nodeType":"41","messageId":"42","endLine":53,"endColumn":32},{"ruleId":"43","severity":1,"message":"44","line":47,"column":17,"nodeType":"45","messageId":"46","endLine":47,"endColumn":27},{"ruleId":"35","severity":1,"message":"36","line":58,"column":35,"nodeType":"37","messageId":"38","endLine":58,"endColumn":37},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'exRateType' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]